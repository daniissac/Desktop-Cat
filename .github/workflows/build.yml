name: Build and Release KIND

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERSION: 1.0.${{ github.run_number }}

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: flake8 .
      - name: Run tests
        run: pytest

  build:
    needs: lint_and_test
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build with PyInstaller
        uses: ./.github/actions/build-kind
      - name: Code Sign (Windows)
        if: runner.os == 'Windows'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          echo $env:WINDOWS_CERTIFICATE | Out-File -FilePath certificate.pfx -Encoding Byte
          signtool sign /f certificate.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /t http://timestamp.digicert.com /v dist\KIND.exe
        shell: pwsh
      - name: Code Sign (macOS)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          codesign --force --options runtime --sign "Developer ID Application" dist/KIND.app
      - name: Zip artifacts
        uses: ./.github/actions/zip-artifacts
      - name: Generate checksums
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            certutil -hashfile KIND-Windows.zip SHA256 > KIND-Windows.zip.sha256
          else
            shasum -a 256 KIND-macOS.zip > KIND-macOS.zip.sha256
          fi
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: KIND-${{ runner.os }}-py${{ matrix.python-version }}
          path: |
            KIND-${{ runner.os }}.zip
            KIND-${{ runner.os }}.zip.sha256

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  upload_assets:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: KIND-${{ runner.os }}-py${{ matrix.python-version }}
          path: ./artifacts
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $assetName = "KIND-${{ runner.os }}-py${{ matrix.python-version }}.zip"
          $assetPath = "./artifacts/KIND-${{ runner.os }}.zip"
          $checksumName = "$assetName.sha256"
          $checksumPath = "./artifacts/KIND-${{ runner.os }}.zip.sha256"
          
          function Upload-Asset($name, $path) {
            if (Test-Path $path) {
              Write-Output "Uploading $name"
              if ("${{ runner.os }}" -eq "Windows") {
                curl.exe -H "Authorization: token $env:GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary "@$path" "${{ needs.create_release.outputs.upload_url }}?name=$name"
              } else {
                curl -H "Authorization: token $env:GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary "@$path" "${{ needs.create_release.outputs.upload_url }}?name=$name"
              }
            } else {
              Write-Error "Asset file not found: $path"
              exit 1
            }
          }
          
          Upload-Asset $assetName $assetPath
          Upload-Asset $checksumName $checksumPath
        shell: pwsh

  test_release:
    needs: upload_assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - name: Download release asset
        uses: actions/download-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_name: KIND-${{ runner.os }}-py3.9.zip
          path: ./
      - name: Extract and test
        run: |
          Expand-Archive -Path KIND-${{ runner.os }}-py3.9.zip -DestinationPath ./extracted
          if ("${{ runner.os }}" -eq "Windows") {
            Start-Process -FilePath .\extracted\KIND.exe -ArgumentList "--version" -NoNewWindow -Wait
          } else {
            chmod +x ./extracted/KIND.app/Contents/MacOS/KIND
            ./extracted/KIND.app/Contents/MacOS/KIND --version
          }
        shell: pwsh
